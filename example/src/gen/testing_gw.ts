// @generated by protoc-gen-grpc-edge-gateway v0.0.1 with parameter "target=ts"
// @generated from file testing.proto (package testing, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Context, Handler, Pattern, RuntimePatternRouter } from "@grpc-edge-gateway/core";
import type { PromiseClient } from "@bufbuild/connect";
import { Code, ConnectError } from "@bufbuild/connect";

import { Status, Detail, Metadata, ChangeHealth, Interceptor } from './testing_connect'
const patternStatusGet0 = Pattern.create(1, [2, 0, 1, 0, 4, 1, 5, 1], ["status", "code"], '')

type StatusT = typeof Status

export function registerStatusHandlerClient(
  router: RuntimePatternRouter<Handler>,
  client: PromiseClient<StatusT>,
) {
  router.addPattern('POST', patternStatusGet0, async (ctx: Context) => {
    try {
      const body = (await ctx.req.json()) as any;
      let param = ""
      param = ctx.params["code"]
      if (param === undefined) {
        throw new ConnectError("missing parameter code", Code.InvalidArgument)
      }
      body.code = param
      const res = await client.get(body, ctx.callOptions());
      return new Response(JSON.stringify(res), {
        status: 200,
        headers: ctx.forwardResponseMetadata(),
      });
    } catch (e) {
      if (e instanceof ConnectError) {
        throw e;
      }
      throw new ConnectError('Internal Server Error', Code.Internal, ctx.forwardResponseMetadata(), undefined, e);
    }
  });

}

const patternDetailGet0 = Pattern.create(1, [2, 0, 2, 1], ["detail", "code"], '')

type DetailT = typeof Detail

export function registerDetailHandlerClient(
  router: RuntimePatternRouter<Handler>,
  client: PromiseClient<DetailT>,
) {
  router.addPattern('POST', patternDetailGet0, async (ctx: Context) => {
    try {
      const body = (await ctx.req.json()) as any;
      const res = await client.get(body, ctx.callOptions());
      return new Response(JSON.stringify(res), {
        status: 200,
        headers: ctx.forwardResponseMetadata(),
      });
    } catch (e) {
      if (e instanceof ConnectError) {
        throw e;
      }
      throw new ConnectError('Internal Server Error', Code.Internal, ctx.forwardResponseMetadata(), undefined, e);
    }
  });

}

type MetadataT = typeof Metadata

export function registerMetadataHandlerClient(
  router: RuntimePatternRouter<Handler>,
  client: PromiseClient<MetadataT>,
) {
}

type ChangeHealthT = typeof ChangeHealth

export function registerChangeHealthHandlerClient(
  router: RuntimePatternRouter<Handler>,
  client: PromiseClient<ChangeHealthT>,
) {
}

type InterceptorT = typeof Interceptor

export function registerInterceptorHandlerClient(
  router: RuntimePatternRouter<Handler>,
  client: PromiseClient<InterceptorT>,
) {
}

